import org.apache.tools.ant.taskdefs.condition.Os
plugins {
    id 'java'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

version = "1.1.0"
group = "info.neuxs"
archivesBaseName = "modmenu"

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url "https://repo.spongepowered.org/maven/"
    }
    maven {
        url "https://maven.fabricmc.net/"
    }
}

dependencies {
    //Cosmic Reach main jar
    implementation(files("${project.rootDir}/cosmic-reach.jar"))
//    implementation project(':modLoader')

    implementation("com.google.guava:guava:33.0.0-jre")
    implementation("com.google.code.gson:gson:2.9.1")

    implementation("net.fabricmc:fabric-loader:0.15.7")
    implementation("net.fabricmc:tiny-mappings-parser:0.2.2.14")
    implementation("net.fabricmc:access-widener:2.1.0")
    implementation("net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5")

    implementation("org.ow2.asm:asm:9.6")
    implementation("org.ow2.asm:asm-util:9.6")
    implementation("org.ow2.asm:asm-tree:9.6")
    implementation("org.ow2.asm:asm-analysis:9.6")
    implementation("org.ow2.asm:asm-commons:9.6")
    implementation("io.github.llamalad7:mixinextras-fabric:0.3.5")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    it.options.release = 16
}

tasks.register('buildAndCopy', Copy) {
    group 'build'
    dependsOn 'assemble'
    from "build/libs/"
    into "../run/mods"
}

tasks.register('runClient', Exec) {
    //TODO: actually add stuff to classpath instead of compiling and copying.
    dependsOn 'buildAndCopy'
    workingDir "${project.rootDir}/run/"
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', "${project.rootDir}/run/launch.bat"
    }else{
        commandLine 'sh', "${project.rootDir}/run/launch.sh"
    }

}